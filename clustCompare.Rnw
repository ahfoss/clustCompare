% To compile on command line:
% > Rscript -e "knitr::knit('knitrdoc.Rnw')"
% > pdflatex knitrdoc.tex
% > pdflatex knitrdoc.tex

\documentclass{article}

\title{}
\author{Alex Foss}
%\date{}

\usepackage[letterpaper, total={7in, 10in}]{geometry}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{hyperref}
\usepackage{graphicx}
\usepackage{multirow} % for table cells spanning multiple rows

% Create external files in this document.
% used for biblio
\usepackage{filecontents}

%\usepackage[square,numbers]{natbib}
%\bibliographystyle{plainnat} 

% for double spacing
%\usepackage{setspace}
%\doublespacing

\hypersetup{
    linkcolor=,
    colorlinks=true,
    urlcolor=blue
}

\newcommand{\bs}[1]{\boldsymbol{#1}}
\newcommand{\bx}{\boldsymbol{x}}


%%% For algorithm code, with custom indentations.
%%% must include algorithmic.sty and algorithm.sty
%%% in working directory.
%\usepackage{algorithm}
%\usepackage{algorithmic}
%\newlength\myindent
%\setlength\myindent{2em}
%\newcommand\bindent{%
%  \begingroup
%  \setlength{\itemindent}{\myindent}
%  \addtolength{\algorithmicindent}{\myindent}
%}
%\newcommand\eindent{\endgroup}



% \tiny
% \scriptsize
% \footnotesize
% \small
% \normalsize
% \large
% \Large
% \LARGE
% \huge
% \Huge 

\begin{document}

\maketitle

\tableofcontents
\listoffigures
\listoftables

\newpage

\section{Initializations}


<<init>>=
#opts_knit$set(concordance=TRUE)
#opts_knit$set(self.contained=FALSE)
#opts_knit$set(tidy=TRUE)
#suppressMessages(library(xtable))
suppressMessages(library(tictoc))
suppressMessages(library(MASS)) # for lda
suppressMessages(library(ggplot2))
suppressMessages(library(dbscan))
sessionInfo()
@


\newpage
\section{Iris ``Classic''}
<<iris1>>=
irisOrig <- iris
irisRot <- lda(
  x = iris[,1:4,],
  grouping = iris$Species
)
str(irisRot)
rots <- as.matrix(iris[,1:4]) %*% irisRot$scaling
iris$ROT1 <- rots[,1]
iris$ROT2 <- rots[,2]
pairs(iris, col = iris$Species)

(
  ggplot(
    iris,
    aes(x=Sepal.Width, y = Petal.Width, color = Species)
  )
  + geom_point()
)
@

\newpage
\subsection{DBSCAN}
<<id1>>=
# 0.4 -- 0.7 look reasonable
kNNdistplot(iris[,1:4], k = 5)
abline(h=.5, col = "red", lty=2)
res1 <- dbscan(iris[,1:4], eps = .5, minPts = 5)
iris$db_mp5_ep0p5 <- factor(res1$cluster + 1)
(
  ggplot(
    iris,
    aes(x=Sepal.Width, y = Petal.Width, color = db_mp5_ep0p5)
  )
  + geom_point()
)
@

\newpage
\subsubsection{Magic Parameter Knowledge}
<<id2>>=
db_iris_parm <- expand.grid(
  eps = seq(0.4, 0.6, 0.1),
  mp  = 4:6
#  mp  = c(3,5,7)
)
tic()
db_iris_list <- lapply(
  1:nrow(db_iris_parm),
  function(i) {
    dres <- dbscan(
      iris[,1:4],
      eps = db_iris_parm$eps[i],
      minPts = db_iris_parm$mp[i]
    )
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 1),
	eps = paste('epsilon =',db_iris_parm$eps[i]),
	minPts = paste('minPts =',db_iris_parm$mp[i])
      )
    ))
  }
)
toc()
db_iris_df <- Reduce(f = rbind, x = db_iris_list)

(
  ggplot(
    db_iris_df,
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(eps), cols = vars(minPts))
)
@

\newpage
\subsubsection{Slightly-Less-Magic Parameter Knowledge}
<<id3>>=
db_iris_parm <- expand.grid(
  eps = c(0.4, 0.8, 1.0),
  mp  = c(3,5,7)
)
tic()
db_iris_list <- lapply(
  1:nrow(db_iris_parm),
  function(i) {
    dres <- dbscan(
      iris[,1:4],
      eps = db_iris_parm$eps[i],
      minPts = db_iris_parm$mp[i]
    )
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 1),
	eps = paste('epsilon =',db_iris_parm$eps[i]),
	minPts = paste('minPts =',db_iris_parm$mp[i])
      )
    ))
  }
)
toc()
db_iris_df <- Reduce(f = rbind, x = db_iris_list)

(
  ggplot(
    db_iris_df,
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(eps), cols = vars(minPts))
)
@


\newpage
\subsection{K-Means: Cake or Death?}
<<ik1>>=
km_iris_parm <- expand.grid(
  centers = c(2:4),
  nstart = c(1, 5, 10),
  iter.max = c(10, 100, 1000)
)
tic()
km_iris_list <- lapply(
  1:nrow(km_iris_parm),
  function(i) {
    dres <- kmeans(
      iris[,1:4],
      centers = km_iris_parm$centers[i],
      nstart = km_iris_parm$nstart[i],
      iter.max = km_iris_parm$iter.max[i]
    )
    # reorder clusters
    dres$cluster <- order(order(dres$centers[,4]))[dres$cluster]
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 0),
	centers = km_iris_parm$centers[i],
	nstart = km_iris_parm$nstart[i],
	iter.max = km_iris_parm$iter.max[i]
      )
    ))
  }
)
toc()
km_iris_df <- Reduce(f = rbind, x = km_iris_list)

(
  ggplot(
    km_iris_df[km_iris_df$iter.max == 1000,],
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(centers), cols = vars(nstart))
)
@



\newpage
\section{Iris Plus One: Hard Mode?}
<<irispp1>>=
extraPt <- data.frame(
  Sepal.Length = 5.0,
  Sepal.Width = 3.1,
  Petal.Length = 2.5,
  Petal.Width = 0.8,
  Species = 'EXTRA'
)
iris <- rbind(irisOrig, extraPt)
#irisExtra <- rbind(iris, extraPt)
irisRot <- lda(
  x = iris[,1:4,],
  grouping = iris$Species
)
str(irisRot)
rots <- as.matrix(iris[,1:4]) %*% irisRot$scaling
iris$ROT1 <- rots[,1]
iris$ROT2 <- rots[,2]
pairs(iris, col = iris$Species)

(
  ggplot(
    iris,
    aes(x=Sepal.Width, y = Petal.Width, color = Species)
  )
  + geom_point()
)
@

\newpage
\subsection{DBSCAN}
<<idpp1>>=
# 0.4 -- 0.7 look reasonable
kNNdistplot(iris[,1:4], k = 5)
abline(h=.5, col = "red", lty=2)
res1 <- dbscan(iris[,1:4], eps = .5, minPts = 5)
iris$db_mp5_ep0p5 <- factor(res1$cluster + 1)
(
  ggplot(
    iris,
    aes(x=Sepal.Width, y = Petal.Width, color = db_mp5_ep0p5)
  )
  + geom_point()
)
@

\newpage
\subsubsection{Magic Parameter Knowledge}
<<idpp2>>=
db_iris_parm <- expand.grid(
  eps = seq(0.4, 0.6, 0.1),
  mp  = 4:6
#  mp  = c(3,5,7)
)
tic()
db_iris_list <- lapply(
  1:nrow(db_iris_parm),
  function(i) {
    dres <- dbscan(
      iris[,1:4],
      eps = db_iris_parm$eps[i],
      minPts = db_iris_parm$mp[i]
    )
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 1),
	eps = paste('epsilon =',db_iris_parm$eps[i]),
	minPts = paste('minPts =',db_iris_parm$mp[i])
      )
    ))
  }
)
toc()
db_iris_df <- Reduce(f = rbind, x = db_iris_list)

(
  ggplot(
    db_iris_df,
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(eps), cols = vars(minPts))
)
@

\newpage
\subsubsection{Slightly-Less-Magic Parameter Knowledge}
<<idpp3>>=
db_iris_parm <- expand.grid(
  eps = c(0.4, 0.8, 1.0),
  mp  = c(3,5,7)
)
tic()
db_iris_list <- lapply(
  1:nrow(db_iris_parm),
  function(i) {
    dres <- dbscan(
      iris[,1:4],
      eps = db_iris_parm$eps[i],
      minPts = db_iris_parm$mp[i]
    )
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 1),
	eps = paste('epsilon =',db_iris_parm$eps[i]),
	minPts = paste('minPts =',db_iris_parm$mp[i])
      )
    ))
  }
)
toc()
db_iris_df <- Reduce(f = rbind, x = db_iris_list)

(
  ggplot(
    db_iris_df,
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(eps), cols = vars(minPts))
)
@



\newpage
\subsection{K-Means: Cake or Death?}
<<ikpp1>>=
km_iris_parm <- expand.grid(
  centers = c(2:4),
  nstart = c(1, 5, 10),
  iter.max = c(10, 100, 1000)
)
tic()
km_iris_list <- lapply(
  1:nrow(km_iris_parm),
  function(i) {
    dres <- kmeans(
      iris[,1:4],
      centers = km_iris_parm$centers[i],
      nstart = km_iris_parm$nstart[i],
      iter.max = km_iris_parm$iter.max[i]
    )
    # reorder clusters
    dres$cluster <- order(order(dres$centers[,4]))[dres$cluster]
    return(cbind(
      iris,
      data.frame(
        cluster = factor(dres$cluster + 0),
	centers = km_iris_parm$centers[i],
	nstart = km_iris_parm$nstart[i],
	iter.max = km_iris_parm$iter.max[i]
      )
    ))
  }
)
toc()
km_iris_df <- Reduce(f = rbind, x = km_iris_list)

(
  ggplot(
    km_iris_df[km_iris_df$iter.max == 1000,],
    aes(x=Sepal.Width, y = Petal.Width, color = cluster)
  )
  + geom_point()
  + facet_grid(rows = vars(centers), cols = vars(nstart))
)
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Syntax for generating a figure %%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{figure}
%\begin{center}
%\includegraphics[height=4cm]{path}
%\end{center}
%\caption{}
%\label{fig:}
%\end{figure}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Syntax for generating xtable  %%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%<<sampleXtable,results='asis',echo=FALSE>>=
%sampleDf <- data.frame(n1=rnorm(5),pois1=rpois(5,10))
%xtable(sampleDf,caption='Sample Table',label='tab:')
%@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Syntax for generating table %%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{table}
%\begin{tabular}{|lcr|}
%\hline
%  & \multicolumn{2}{|c|}{Multicolumn text} \\
%\hline
%  m=1  &  eating                 & m=9  \\
%  m=2  &  getting in/out of bed  & m=10 \\
%  \multirow{3}{*}{Multirow}  &  getting in/out of bed  & m=10 \\
%    &  getting in/out of bed  & m=10 \\
%    &  getting in/out of bed  & m=10 \\
%\hline
%\end{tabular}
%\caption{}
%\label{tab:}
%\end{table}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Syntax for algorithm (see above) %%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{algorithm}
%\caption{KAMILA}
%\begin{algorithmic}
%\FOR{User-specified number of initializations}
%\STATE{Initialize $\hat{\boldsymbol{\mu}}_g^{(0)}, \hat{\boldsymbol{\theta}}_{gq}^{(0)} \; \forall g,q$ }
%\REPEAT
%  \STATE{PARTITION STEP}
%  \bindent
%    \STATE{ $d_{ig}^{(t)} \leftarrow \text{dist}(\mathbf{v}_i, \hat{\boldsymbol{\mu}}_g^{(t)})$ }
%    \STATE{ $r_i^{(t)} \leftarrow \underset{g}{\text{min}}(d_{ig}^{(t)})$ }
%    \STATE{ $\hat{f}_{\mathbf{V}}^{(t)} \leftarrow \text{RadialKDE}(\mathbf{r}^{(t)})$ }
%    \STATE{ $c_{ig}^{(t)} \leftarrow \widehat{Pr}(\mathbf{w}_i \, | \, \text{observation $i \in$ population $g$})$ }
%    \STATE{ $H_i^{(t)}(g) \leftarrow   \log \left[ \hat{f}_{\mathbf{V}}^{(t)}(d_{ig}^{(t)}) \right] + \log \left[ c_{ig}^{(t)} \right]$ }
%    \STATE{ Assign observation $i$ to population $\underset{g}{\text{argmax}} \{ H_i^{(t)}(g) \}$}
%  \eindent
%  \STATE{ESTIMATION STEP}
%  \bindent
%    \STATE{ Calculate $ \hat{\boldsymbol{\mu}}_g^{(t+1)}$ and $\hat{\boldsymbol{\theta}}_{gq}^{(t+1)}$}
%  \eindent
%\UNTIL{Convergence }
%\STATE{ $ObjectiveFun \leftarrow \sum_{i=1}^N \underset{g}{\text{max}} \{ H_i^{(final)}(g) \} $ }
%\ENDFOR
%\STATE{ Output partition that maximizes $ObjectiveFun$ }
%\end{algorithmic}
%\label{alg:kamila}
%\end{algorithm}



%\begin{filecontents}{biblio.bib}
%@book{
%  author99
% ,title = {My Great Book}
% ,author = {Samuel Clemens}
% ,location = {Springfield}
% ,publisher= {Random House Books}
% ,date = 1999
%}
%\end{filecontents}

%\bibliography{biblio}


\end{document}
